# _*_ coding:utf-8 _*_
# a = 1 , b = a ,a = 2此时 b == 2
#unicode编码为国际统一编码，utf-8相对于Unicode来说所有存储空间更小，但表达内容无差别
# 关于元组 a = (1) , a==1; a = (1,);元组为不可变类型，a = (1, 'e', [1, 2, 3])此时可修改元组中列表元素
#dict用空间换时间，dict中key为不可变类型，
#可hash往往意味着不可变，
#变量与对象的区别
#return意味着函数的结束
#Python的函数返回多值其实就是返回一个tuple
#位置参数，按顺序依次传入，必选参数在前，默认参数在后
#Python函数在定义的时候，默认参数的值就被计算出来了，它指向一个对象，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的了。
#定义默认参数要牢记一点：默认参数必须指向不变对象！ 
#可变参数：nums=[1, 2, 3],*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。
#**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。
#使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
#针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。
#Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。
#for用于可迭代对象
#通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。（生成器优点）
#迭代器与可迭代对象，迭代器可以看做一串代码，调用一次运行一次，而可迭代对象则可看作种数据结构。
#既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
#添加python搜索路径，sys.path(程序运行结束后失效)，设置环境变量PYTHONPATH
#
#
#
#